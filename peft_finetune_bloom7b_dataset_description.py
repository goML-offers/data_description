# -*- coding: utf-8 -*-
"""PEFT Finetune-Bloom7B-dataset_description.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T8v8q3BdoUXlMD4vSSbq4OHj82d7lzsU

# Using ðŸ¤— PEFT & bitsandbytes to finetune a LoRa checkpoint
"""

!pip install -q bitsandbytes datasets accelerate loralib
!pip install -q git+https://github.com/huggingface/transformers.git@main git+https://github.com/huggingface/peft.git

from huggingface_hub import notebook_login

notebook_login()

!nvidia-smi -L

"""### Setup the model"""

import os
os.environ["CUDA_VISIBLE_DEVICES"]="0"
import torch
import torch.nn as nn
import bitsandbytes as bnb
from transformers import AutoTokenizer, AutoConfig, AutoModelForCausalLM

model = AutoModelForCausalLM.from_pretrained(
    "bigscience/bloom-7b1",
    load_in_8bit=True,
    device_map='auto',
)

tokenizer = AutoTokenizer.from_pretrained("bigscience/bloom-7b1")

"""### Freezing the original weights

"""

for param in model.parameters():
  param.requires_grad = False  # freeze the model - train adapters later
  if param.ndim == 1:
    # cast the small parameters (e.g. layernorm) to fp32 for stability
    param.data = param.data.to(torch.float32)

model.gradient_checkpointing_enable()  # reduce number of stored activations
model.enable_input_require_grads()

class CastOutputToFloat(nn.Sequential):
  def forward(self, x): return super().forward(x).to(torch.float32)
model.lm_head = CastOutputToFloat(model.lm_head)

"""### Setting up the LoRa Adapters"""

def print_trainable_parameters(model):
    """
    Prints the number of trainable parameters in the model.
    """
    trainable_params = 0
    all_param = 0
    for _, param in model.named_parameters():
        all_param += param.numel()
        if param.requires_grad:
            trainable_params += param.numel()
    print(
        f"trainable params: {trainable_params} || all params: {all_param} || trainable%: {100 * trainable_params / all_param}"
    )

from peft import LoraConfig, get_peft_model

config = LoraConfig(
    r=16, #attention heads
    lora_alpha=32, #alpha scaling
    # target_modules=["q_proj", "v_proj"], #if you know the
    lora_dropout=0.05,
    bias="none",
    task_type="CAUSAL_LM" # set this for CLM or Seq2Seq
)

model = get_peft_model(model, config)
print_trainable_parameters(model)

"""## Data"""

from datasets import DatasetDict, Dataset

datasetdict=DatasetDict({

    'train': Dataset.from_json("/content/DataDescriptions - Sheet1 (1) (1).json")
    })

datasetdict

def merge_columns(example):
    example["prediction"] = example["Dataset Name"] + " " + example['Dataset columns'] + " " + example['Dataset value 1'] + " ->: " + str(example['Dataset Description'])
    return example

datasetdict['train'] = datasetdict['train'].map(merge_columns)
datasetdict['train']["prediction"][:5]

formatted_dataset = datasetdict.map(merge_columns)

formatted_dataset['train'][0]

formatted_dataset= formatted_dataset.map(lambda samples: tokenizer(samples['prediction']), batched=True)

formatted_dataset

"""### Training"""

import transformers
trainer = transformers.Trainer(
    model=model,
    train_dataset=formatted_dataset['train'],
    args=transformers.TrainingArguments(
        per_device_train_batch_size=4,
        gradient_accumulation_steps=4,
        warmup_steps=100,
        max_steps=50,
        learning_rate=2e-4,
        fp16=True,
        logging_steps=1,
        output_dir='outputs'
    ),
    data_collator=transformers.DataCollatorForLanguageModeling(tokenizer, mlm=False)
)
model.config.use_cache = False  # silence the warnings. Please re-enable for inference!
trainer.train()

"""## Share adapters on the ðŸ¤— Hub"""

model.push_to_hub("prashantkambi/dataset_description",
                  use_auth_token=True,
                  commit_message="basic training",
                  private=True)

"""## Load adapters from the Hub"""

import torch
from peft import PeftModel, PeftConfig
from transformers import AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig

device_map = {
    "transformer.word_embeddings": 0,
    "transformer.word_embeddings_layernorm": 0,
    "lm_head": "cpu",
    "transformer.h": 0,
    "transformer.ln_f": 0,
}

quantization_config = BitsAndBytesConfig(llm_int8_enable_fp32_cpu_offload=True)

peft_model_id = "prashantkambi/dataset_description"
config = PeftConfig.from_pretrained(peft_model_id)
model = AutoModelForCausalLM.from_pretrained(config.base_model_name_or_path, return_dict=True, load_in_8bit=True, device_map=device_map,llm_int8_enable_fp32_cpu_offload=True)
tokenizer = AutoTokenizer.from_pretrained(config.base_model_name_or_path)

# Load the Lora model
model = PeftModel.from_pretrained(model, peft_model_id)

"""## Inference"""

inputs = list()
outputs = list()
for input in formatted_dataset['train']['prediction']:
  input = input.split('->:')[0]
  inputs.append(input)
  input = input + '->:'
  print(input)
  batch = tokenizer(input, return_tensors='pt')
  with torch.cuda.amp.autocast():
    output_tokens = model.generate(**batch, max_new_tokens=50)

  outputs.append(tokenizer.decode(output_tokens[0], skip_special_tokens=True))

batch = tokenizer(formatted_dataset['train']['prediction'][0].split('->:')[0] + '->:', return_tensors='pt')

with torch.cuda.amp.autocast():
  output_tokens = model.generate(**batch, max_new_tokens=50)

print('\n\n', tokenizer.decode(output_tokens[0], skip_special_tokens=True))